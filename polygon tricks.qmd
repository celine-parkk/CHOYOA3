---
title: "polygon tricks"
format: html
editor: visual
---

```{r}
library(dplyr)
library(purrr)
library(tidyr)
library(tibble)
library(ggplot2)
library(ambient)
library(tictoc)
library(ggthemes)
library(gifski)
```

```{r}
square <- tibble( #creating a square tibble that contains x and y columns
  x = c(0, 1, 1, 0, 0),
  y = c(0, 0, 1, 1, 0),
  seg_len = c(1, 1, 1, 1, 0) #specifying the length of the edge
)
```

```{r}
show_polygon <- function(polygon, show_vertices = TRUE, ...) { #simple plotting function to display a polygon
  
  pic <- ggplot(polygon, aes(x, y)) +
    geom_polygon(colour = "black", fill = NA, show.legend = FALSE, ...) + #adjusting the color
    coord_equal() + 
    theme_void()
  
  if(show_vertices == TRUE) {
    pic <- pic + geom_point(colour = "black", size = 2)
  }
  return(pic)
}

show_polygon(square) #creating a square polygon
```

```{r}
sample_edge <- function(polygon) {
  sample(nrow(polygon), 1, prob = polygon$seg_len)
} #break longer edges of polygon

edge_length <- function(x1, y1, x2, y2) {
  sqrt((x1 - x2)^2 + (y1 - y2)^2) #break an edge into two edges
}

edge_noise <- function(size) {
  runif(1, min = -size/2, max = size/2)
} #returns a random number between -size/2 and size/2
```

```{r}
insert_edge <- function(polygon, noise) {
  
  # sample and edge and remember its length
  ind <- sample_edge(polygon)
  len <- polygon$seg_len[ind]
  
  # one endpoint of the old edge
  last_x <- polygon$x[ind]
  last_y <- polygon$y[ind]
  
  # the other endpoint of the old edge
  next_x <- polygon$x[ind + 1]
  next_y <- polygon$y[ind + 1]
  
  # location of the new point to be inserted: noise 
  # is scaled proportional to the length of the old edge
  new_x <- (last_x + next_x) / 2 + edge_noise(len * noise)
  new_y <- (last_y + next_y) / 2 + edge_noise(len * noise)
  
  # the new row for insertion into the tibble, 
  # containing coords and length of the 'new' edge
  new_row <- tibble(
    x = new_x,
    y = new_y,
    seg_len = edge_length(new_x, new_y, next_x, next_y)
  )
  
  # update the length of the 'old' edge
  polygon$seg_len[ind] <- edge_length(
    last_x, last_y, new_x, new_y
  )
  
  # insert a row into the tibble
  bind_rows(
    polygon[1:ind, ],
    new_row,
    polygon[-(1:ind), ]
  )
}

set.seed(2)
polygon <- square 
polygon <- insert_edge(polygon, noise = .5); show_polygon(polygon)
polygon <- insert_edge(polygon, noise = .5); show_polygon(polygon)
polygon <- insert_edge(polygon, noise = .5); show_polygon(polygon)
```

```{r}
grow_polygon <- function(polygon, iterations, noise, seed = NULL) { #inserting edges into a polygon for a fixed number of iterations
  if(!is.null(seed)) set.seed(seed) #generating random numbers
  for(i in 1:iterations) polygon <- insert_edge(polygon, noise)
  return(polygon)
}
```

```{r}
square |> 
  grow_polygon(iterations = 30, noise = .5, seed = 2) |> 
  show_polygon(show_vertices = FALSE)
square |> 
  grow_polygon(iterations = 100, noise = .5, seed = 2) |> #creating recursively deformed polygon
  show_polygon(show_vertices = FALSE)
square |> 
  grow_polygon(iterations = 1000, noise = .5, seed = 2) |> 
  show_polygon(show_vertices = FALSE)
```

```{r}
grow_multipolygon <- function(base_shape, n, seed = NULL, ...) {
  if(!is.null(seed)) set.seed(seed)
  polygons <- list()
  for(i in 1:n) {
    polygons[[i]] <- grow_polygon(base_shape, ...)
  }
  polygons <- bind_rows(polygons, .id = "id")
  polygons
}

show_multipolygon <- function(polygon, fill, alpha = .02, ...) {
  ggplot(polygon, aes(x, y, group = id)) +
    geom_polygon(colour = NA, alpha = alpha, fill = fill, ...) + 
    coord_equal() + 
    theme_void()
}

tic()
dat <- square |> 
  grow_polygon(iterations = 100, noise = .5, seed = 2) |>
  grow_multipolygon(n = 50, iterations = 1000, noise = 1, seed = 2)
toc()

show_multipolygon(dat, fill = "#d43790")
```
